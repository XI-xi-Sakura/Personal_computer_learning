CREATE TABLE t (
`c0000` INT NOT NULL,
`c0003` TINYINT NOT NULL,
`c0004` INT NOT NULL,
PRIMARY KEY (`c0000`,`c0003`,`c0004`)
)
PARTITION BY KEY (c0003) PARTITIONS 6;
INSERT INTO t VALUES (123,12,0);
INSERT INTO t VALUES (122,13,0);
BEGIN;
SELECT * FROM t WHERE `c0000` = 122 AND `c0003` = 13 FOR UPDATE;
c0000	c0003	c0004
122	13	0
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
BEGIN;
UPDATE t SET `c0003` = 16 WHERE `c0004`;
COMMIT;
COMMIT;
DROP TABLE t;
CREATE TABLE t (
`c0000` INT NOT NULL,
`c0003` TINYINT NOT NULL,
`c0004` INT NOT NULL,
PRIMARY KEY (`c0000`,`c0003`,`c0004`)
)
PARTITION BY KEY (c0003) PARTITIONS 6;
INSERT INTO t VALUES (121,13,0);
INSERT INTO t VALUES (123,12,0);
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
BEGIN;
SELECT * FROM t WHERE `c0000` = 121 AND `c0003` = 13 AND `c0004` = 0 FOR UPDATE;
c0000	c0003	c0004
121	13	0
SELECT LOCK_DATA
FROM performance_schema.data_locks
WHERE LOCK_TYPE = 'RECORD' AND OBJECT_NAME = 't';
LOCK_DATA
121, 13, 0
UPDATE t SET `c0003` = 16 WHERE `c0004`;
SELECT LOCK_DATA
FROM performance_schema.data_locks
WHERE LOCK_TYPE = 'RECORD' AND OBJECT_NAME = 't';
LOCK_DATA
121, 13, 0
COMMIT;
DROP TABLE t;
CREATE TABLE t (
`c0000` INT NOT NULL,
`c0003` TINYINT NOT NULL,
`c0004` INT NOT NULL,
PRIMARY KEY (`c0000`,`c0003`,`c0004`)
)
PARTITION BY KEY (c0003) PARTITIONS 6;
INSERT INTO t VALUES (1,10,0);
INSERT INTO t VALUES (2,11,0);
INSERT INTO t VALUES (4,13,0);
INSERT INTO t VALUES (5,14,0);
INSERT INTO t VALUES (6,15,0);
INSERT INTO t VALUES (7,16,0);
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
BEGIN;
SELECT LOCK_DATA
FROM performance_schema.data_locks
WHERE LOCK_TYPE = 'RECORD' AND OBJECT_NAME = 't';
LOCK_DATA
UPDATE t SET `c0003` = 16 WHERE `c0004`;
SELECT LOCK_DATA
FROM performance_schema.data_locks
WHERE LOCK_TYPE = 'RECORD' AND OBJECT_NAME = 't';
LOCK_DATA
COMMIT;
DROP TABLE t;
SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;
CREATE TABLE t (
i INT NOT NULL PRIMARY KEY
) ENGINE=INNODB
PARTITION BY RANGE(i) (
PARTITION p0 VALUES LESS THAN (11),
PARTITION p1 VALUES LESS THAN MAXVALUE);
CREATE PROCEDURE check_locks_and_rollback()
BEGIN
SELECT partition_name, lock_mode, lock_status, lock_type, lock_data
FROM performance_schema.data_locks
WHERE object_schema="test" AND OBJECT_NAME='t'
    ORDER BY partition_name, lock_type, lock_data;
ROLLBACK;
END //
CREATE PROCEDURE check_locks_le(n INT)
BEGIN
SELECT i FROM t FORCE INDEX (PRIMARY) WHERE i <= n FOR UPDATE;
CALL check_locks_and_rollback();
END //
CREATE PROCEDURE check_locks_gt(n INT)
BEGIN
SELECT i FROM t FORCE INDEX (PRIMARY) WHERE i > n FOR UPDATE;
CALL check_locks_and_rollback();
END //
CREATE PROCEDURE check_locks_between(a INT, b INT)
BEGIN
SELECT i FROM t FORCE INDEX (PRIMARY) WHERE i BETWEEN a AND b FOR UPDATE;
CALL check_locks_and_rollback();
END //
INSERT INTO t VALUES (1), (2), (3), (7), (11), (13), (17), (19);
SET @save_autocommit= @@autocommit;
SET autocommit= 0;
CALL check_locks_le(2);
i
1
2
partition_name	lock_mode	lock_status	lock_type	lock_data
p0	X	GRANTED	RECORD	1
p0	X	GRANTED	RECORD	2
p0	IX	GRANTED	TABLE	NULL
CALL check_locks_between(0, 3);
i
1
2
3
partition_name	lock_mode	lock_status	lock_type	lock_data
p0	X	GRANTED	RECORD	1
p0	X	GRANTED	RECORD	2
p0	X	GRANTED	RECORD	3
p0	IX	GRANTED	TABLE	NULL
CALL check_locks_between(2, 3);
i
2
3
partition_name	lock_mode	lock_status	lock_type	lock_data
p0	X,REC_NOT_GAP	GRANTED	RECORD	2
p0	X	GRANTED	RECORD	3
p0	IX	GRANTED	TABLE	NULL
CALL check_locks_between(0, 17);
i
1
2
3
7
11
13
17
partition_name	lock_mode	lock_status	lock_type	lock_data
p0	X	GRANTED	RECORD	1
p0	X	GRANTED	RECORD	2
p0	X	GRANTED	RECORD	3
p0	X	GRANTED	RECORD	7
p0	X	GRANTED	RECORD	supremum pseudo-record
p0	IX	GRANTED	TABLE	NULL
p1	X	GRANTED	RECORD	11
p1	X	GRANTED	RECORD	13
p1	X	GRANTED	RECORD	17
p1	IX	GRANTED	TABLE	NULL
CALL check_locks_between(3, 17);
i
3
7
11
13
17
partition_name	lock_mode	lock_status	lock_type	lock_data
p0	X,REC_NOT_GAP	GRANTED	RECORD	3
p0	X	GRANTED	RECORD	7
p0	X	GRANTED	RECORD	supremum pseudo-record
p0	IX	GRANTED	TABLE	NULL
p1	X	GRANTED	RECORD	11
p1	X	GRANTED	RECORD	13
p1	X	GRANTED	RECORD	17
p1	IX	GRANTED	TABLE	NULL
CALL check_locks_between(3, 21);
i
3
7
11
13
17
19
partition_name	lock_mode	lock_status	lock_type	lock_data
p0	X,REC_NOT_GAP	GRANTED	RECORD	3
p0	X	GRANTED	RECORD	7
p0	X	GRANTED	RECORD	supremum pseudo-record
p0	IX	GRANTED	TABLE	NULL
p1	X	GRANTED	RECORD	11
p1	X	GRANTED	RECORD	13
p1	X	GRANTED	RECORD	17
p1	X	GRANTED	RECORD	19
p1	X	GRANTED	RECORD	supremum pseudo-record
p1	IX	GRANTED	TABLE	NULL
CALL check_locks_between(12, 21);
i
13
17
19
partition_name	lock_mode	lock_status	lock_type	lock_data
p1	X	GRANTED	RECORD	13
p1	X	GRANTED	RECORD	17
p1	X	GRANTED	RECORD	19
p1	X	GRANTED	RECORD	supremum pseudo-record
p1	IX	GRANTED	TABLE	NULL
SET autocommit= @save_autocommit;
DROP TABLE t;
CREATE TABLE t (
i INT NOT NULL PRIMARY KEY
) ENGINE=INNODB
PARTITION BY HASH(i)
PARTITIONS 2;
INSERT INTO t VALUES (1), (2), (3), (4), (6), (7), (8), (9), (10);
SET @save_autocommit= @@autocommit;
SET autocommit= 0;
CALL check_locks_le(2);
i
2
1
partition_name	lock_mode	lock_status	lock_type	lock_data
p0	X	GRANTED	RECORD	2
p0	IX	GRANTED	TABLE	NULL
p1	X	GRANTED	RECORD	1
p1	X,GAP	GRANTED	RECORD	3
p1	IX	GRANTED	TABLE	NULL
CALL check_locks_between(0, 3);
i
2
1
3
partition_name	lock_mode	lock_status	lock_type	lock_data
p0	X	GRANTED	RECORD	2
p0	X,GAP	GRANTED	RECORD	4
p0	IX	GRANTED	TABLE	NULL
p1	X	GRANTED	RECORD	1
p1	X	GRANTED	RECORD	3
p1	IX	GRANTED	TABLE	NULL
CALL check_locks_between(2, 3);
i
2
3
partition_name	lock_mode	lock_status	lock_type	lock_data
p0	X,REC_NOT_GAP	GRANTED	RECORD	2
p0	X,GAP	GRANTED	RECORD	4
p0	IX	GRANTED	TABLE	NULL
p1	X	GRANTED	RECORD	3
p1	IX	GRANTED	TABLE	NULL
CALL check_locks_between(2, 6);
i
2
4
6
3
partition_name	lock_mode	lock_status	lock_type	lock_data
p0	X,REC_NOT_GAP	GRANTED	RECORD	2
p0	X	GRANTED	RECORD	4
p0	X	GRANTED	RECORD	6
p0	IX	GRANTED	TABLE	NULL
p1	X	GRANTED	RECORD	3
p1	X,GAP	GRANTED	RECORD	7
p1	IX	GRANTED	TABLE	NULL
CALL check_locks_between(0, 17);
i
2
4
6
8
10
1
3
7
9
partition_name	lock_mode	lock_status	lock_type	lock_data
p0	X	GRANTED	RECORD	10
p0	X	GRANTED	RECORD	2
p0	X	GRANTED	RECORD	4
p0	X	GRANTED	RECORD	6
p0	X	GRANTED	RECORD	8
p0	X	GRANTED	RECORD	supremum pseudo-record
p0	IX	GRANTED	TABLE	NULL
p1	X	GRANTED	RECORD	1
p1	X	GRANTED	RECORD	3
p1	X	GRANTED	RECORD	7
p1	X	GRANTED	RECORD	9
p1	X	GRANTED	RECORD	supremum pseudo-record
p1	IX	GRANTED	TABLE	NULL
CALL check_locks_between(3, 17);
i
4
6
8
10
3
7
9
partition_name	lock_mode	lock_status	lock_type	lock_data
p0	X	GRANTED	RECORD	10
p0	X	GRANTED	RECORD	4
p0	X	GRANTED	RECORD	6
p0	X	GRANTED	RECORD	8
p0	X	GRANTED	RECORD	supremum pseudo-record
p0	IX	GRANTED	TABLE	NULL
p1	X,REC_NOT_GAP	GRANTED	RECORD	3
p1	X	GRANTED	RECORD	7
p1	X	GRANTED	RECORD	9
p1	X	GRANTED	RECORD	supremum pseudo-record
p1	IX	GRANTED	TABLE	NULL
CALL check_locks_between(3, 12);
i
4
6
8
10
3
7
9
partition_name	lock_mode	lock_status	lock_type	lock_data
p0	X	GRANTED	RECORD	10
p0	X	GRANTED	RECORD	4
p0	X	GRANTED	RECORD	6
p0	X	GRANTED	RECORD	8
p0	X	GRANTED	RECORD	supremum pseudo-record
p0	IX	GRANTED	TABLE	NULL
p1	X,REC_NOT_GAP	GRANTED	RECORD	3
p1	X	GRANTED	RECORD	7
p1	X	GRANTED	RECORD	9
p1	X	GRANTED	RECORD	supremum pseudo-record
p1	IX	GRANTED	TABLE	NULL
CALL check_locks_gt(9);
i
10
partition_name	lock_mode	lock_status	lock_type	lock_data
p0	X	GRANTED	RECORD	10
p0	X	GRANTED	RECORD	supremum pseudo-record
p0	IX	GRANTED	TABLE	NULL
p1	X	GRANTED	RECORD	supremum pseudo-record
p1	IX	GRANTED	TABLE	NULL
SET autocommit= @save_autocommit;
DROP PROCEDURE check_locks_le;
DROP PROCEDURE check_locks_gt;
DROP PROCEDURE check_locks_between;
DROP PROCEDURE check_locks_and_rollback;
DROP TABLE t;
